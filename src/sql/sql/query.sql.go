// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getConfigurationByID = `-- name: GetConfigurationByID :one
SELECT id, name, key, value, created_at, updated_at FROM configurations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConfigurationByID(ctx context.Context, id pgtype.UUID) (Configuration, error) {
	row := q.db.QueryRow(ctx, getConfigurationByID, id)
	var i Configuration
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConfigurations = `-- name: GetConfigurations :many
SELECT id, name, key, value, created_at, updated_at FROM configurations
ORDER BY updated_at DESC
`

func (q *Queries) GetConfigurations(ctx context.Context) ([]Configuration, error) {
	rows, err := q.db.Query(ctx, getConfigurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Configuration
	for rows.Next() {
		var i Configuration
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, configuration_id, name, description, start_time, end_time, status, created_at, updated_at FROM jobs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobByID(ctx context.Context, id pgtype.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ConfigurationID,
		&i.Name,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobsByConfigurationID = `-- name: GetJobsByConfigurationID :many
SELECT id, configuration_id, name, description, start_time, end_time, status, created_at, updated_at FROM jobs
WHERE configuration_id = $1
`

func (q *Queries) GetJobsByConfigurationID(ctx context.Context, configurationID pgtype.UUID) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByConfigurationID, configurationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.ConfigurationID,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobsToSchedule = `-- name: GetJobsToSchedule :many
WITH cte AS (
    SELECT id
    FROM jobs
    WHERE status = 'Pending'
    AND start_time BETWEEN NOW() AND NOW() + INTERVAL '5 minutes'
    FOR UPDATE NOWAIT
)
UPDATE jobs
SET status = 'Running', updated_at = NOW()
WHERE id IN (SELECT id FROM cte)
RETURNING id, configuration_id, name, description, start_time, end_time, status, created_at, updated_at
`

func (q *Queries) GetJobsToSchedule(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsToSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.ConfigurationID,
			&i.Name,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, job_id, type, status, scheduled_at, timeout, details, results, created_at, updated_at FROM tasks 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Type,
		&i.Status,
		&i.ScheduledAt,
		&i.Timeout,
		&i.Details,
		&i.Results,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByJobID = `-- name: GetTasksByJobID :many
SELECT id, job_id, type, status, scheduled_at, timeout, details, results, created_at, updated_at FROM tasks
WHERE job_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetTasksByJobID(ctx context.Context, jobID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Type,
			&i.Status,
			&i.ScheduledAt,
			&i.Timeout,
			&i.Details,
			&i.Results,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
